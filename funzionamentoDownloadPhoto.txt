
LOGICA DI GESTIONE FOTO E LUOGHI
Obiettivo:
Evitare di scaricare più volte la stessa foto se un luogo è già stato utilizzato in altri itinerari.

FRONTEND
File: itinerario.page.ts

Quando genero un itinerario, uso il placeId di Google come placeId del mio oggetto Place.

Questo viene fatto nella funzione convertGeneratedToPlaces.

Quando salvo le tappe, invio il placeId, photoReference, lat, lng, name, ecc.

La foto viene scaricata solo se non esiste già nel backend.

BACKEND
File: photoManager.js (o simile)

Funzione getOrDownloadPhoto(placeId, photoReference)

Se esiste già la foto uploads/placeId.jpg, non la riscarica.

Se non esiste, la scarica da Google usando la photoReference.

File: trip.controller.js

Quando riceve i luoghi da salvare:

Chiama getOrDownloadPhoto(...)

Salva il placeId (che ora è quello di Google)

Salva il nome della foto (placeId.jpg) in photoFilename

DATABASE
Tabella places

Campo placeId: contiene direttamente l'ID di Google

Campo photoFilename: contiene il nome file dell’immagine (placeId.jpg)

CARTELLA FOTO
Percorso: /uploads

Contiene le immagini salvate.

Ogni foto ha nome: placeId.jpg

EFFETTO
Se un luogo è già stato salvato in un altro viaggio, non riscarico la foto.

Si risparmia banda e si evita di superare i limiti delle API.

=============================

map.page.ts
Abbiamo modificato la funzione renderMarkers() per usare p.photoFilename e costruire l’URL dell’immagine:
http://localhost:3000/uploads/${p.photoFilename}
Se non è presente, viene usata p.photo o una immagine di default.
Aggiunti log di debug per verificare immagine e nome file.
Fa riferimento a: generateCircularIcon(...) e al campo photoFilename in Place.

generateCircularIcon (in map.page.ts)
Funzione che riceve un URL immagine, disegna un’icona circolare su canvas e restituisce l’immagine come dataURL.
Gestisce errori con fallback su immagine di default.
È stata adattata per funzionare con immagini da server locale.
Fa riferimento a: l’URL generato in renderMarkers().

index.js (backend)
Modificato il middleware statico per la cartella /uploads per aggiungere l’header:
Access-Control-Allow-Origin: *
Questo consente al frontend di caricare le immagini nei canvas anche se il dominio è diverso.
Fa riferimento a: qualsiasi immagine servita dal backend e usata nel frontend nei marker o nei componenti.

trip.model.ts
Nell’interfaccia Place è stato aggiunto il campo:
photoFilename?: string;
Questo campo rappresenta il nome del file dell’immagine salvata nel backend.
Fa riferimento a: map.page.ts, LuogoCardComponent, backend (photoManager.js e salvataggio dati).
